@model MainInfoViewModel;
@{
    string current_user = "unsigned";
    if (User.Identity.IsAuthenticated)
    {
        current_user = User.Identity.Name;
    }
}
<div class="toolbar">
    <button class="toolbar-button-chatmode off"></button>
</div>
<div class="container-console">
    <div class="console-header font-medium">
        <div class="logo txt-console-orange">Terminal: </div>
        <div class="user" id="current_user">@current_user</div>
        <button id="test" type="button">Test</button>
    </div>
    <div class="font-medium">

        <div id="output" class="console-output txt-console-orange">
            <div>welocoime</div>
        </div>

        <div class="console-input-container">
            <div class="keyboard">
                <textarea id="input" rows="1" class="txt-console-bg-gray font-medium"></textarea>
            </div>
        </div>
    </div>
    <div class="themebox">
        <div id="themeTabs" class="console-header txt-console-orange font-medium">
            <div class="tab selected">
                <span>
                    Politicans
                </span>
                <button class="btn-close">
                    X
                </button>
            </div>
            <div class="tab">
                <span>
                    airTalk
                </span>
                <button class="btn-close">
                    X
                </button>
            </div>
            <div class="tab">
                <span>
                    airTalk
                </span>
                <button class="btn-close">
                    X
                </button>
            </div>
            <div class="tab">
                <span>
                    airTalk
                </span>
                <button class="btn-close">
                    X
                </button>
            </div>
        </div>
        <div id="theme-body" style="background-color:antiquewhite">

        </div>
    </div>

</div>


@section Scripts{
@*Initialyzing script*@
<script>
    $(function () {
        $("#test").click(function () {
            
        });

        $('#input').keypress(function (e) {
            if (e.keyCode == 13) {
                let cmd = $(this).val();
                e.preventDefault();
                addTextToConsole(cmd);
                $(this).val('');
                sendCommandToTerminal(cmd);
            }
        });
        
        //$('.btn-close').click(function (e) {
        //    e.preventDefault();
        //    closeTheme(this.parentElement);
        //});

        $('#themeTabs').on('click', '.btn-close', function () {
            closeTheme(this);
        });
        $('.themebox .tab').on('click', function () {
            selectTheme(this);
        });
    });
</script>
    @*cmdTranslatorScript*@
    <script>

        var sendCommandToTerminal = function (cmd) {
            let data = { request: cmd };
            let context = "/Terminal/InitializeCommand";
            sendAjax(context, data);
        };

        var sendAjax = function (url, data) {
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: "text",
                beforeSend: function () {
                    $('#input').prop('disabled', true);
                },
                complete: function () {
                    $('#input').prop('disabled', false);
                    $('#input').focus();
                },
                success: function (response) {
                    //addTextToConsole(response);
                    getResponse(response);
                },
                error: function (req, status, error) {
                    addTextToConsole(error);
                }
            });

            let getResponse = function (response) {
                try {
                    let terminalResult = JSON.parse(response);
                    for (let i = 0; i < terminalResult.length; i++) {

                        let type = terminalResult[i].type;
                        let context = terminalResult[i].context;
                        let data = terminalResult[i].contextParams;
                        let inlineData = terminalResult[i].inlineParams;

                        if (type == "view") {
                            $("#output").append(context);
                            continue;
                        }

                        if (type == "js-inline") {
                            console.log(inlineData);
                            //var args = [];
                            //for (var key in data) {
                            //    args.push(data[key]);
                            //}
                            window[context].apply(this, inlineData);
                            continue;
                        }

                        if (type == "js-model") {
                            window[context](data);
                            continue;
                        }

                        if (type == "ajax") {
                            sendAjax(context, data);
                            continue;
                        }

                        console.log("unkmown type of response");
                    }

                }
                catch (error) {
                    console.log("response error");
                    $('#output').append(response);
                }
            };
        }


    </script>
    @*JS client commands*@
    <script>
        var test = function (tab) {
            alert("test")
        };

        var closeTheme = function (tab) {
            $(tab.parentElement).remove();
            let id = $(tab.parentElement).attr('data-theme-id');
            $('#theme-body [data-theme-id="' + id + '"]').remove();
            sendAjax("/Terminal/deselect", { id: id });
        };

        var selectTheme = function (tab) {
            $('.tab.selected').removeClass('selected');
            $(tab).addClass('selected');
            let id = $(tab).attr('data-theme-id');
            $('#theme-body [data-theme-id]').hide();
             $('[data-theme-id="' + id + '"]').show();

        };

        var updateThemesView = function (session) {

            let addTheme = function (themeModel) {

                let elem = document.createElement("div");
                elem.classList.add("tab");
                elem.setAttribute("data-theme-id", themeModel.id);

                let span = document.createElement("span");
                span.textContent = themeModel.name;
                elem.append(span);

                let body = document.createElement('div');
                body.textContent = themeModel.body;
                body.setAttribute("data-theme-id", themeModel.id);

                let btn = document.createElement("button");
                btn.textContent = "X";
                btn.classList.add("btn-close");
                elem.append(btn);

                $("#themeTabs").append(elem);
                $("#theme-body").append(body);
                $('.themebox .tab').on('click', function () {
                    selectTheme(this);
                });
                selectTheme(elem);
            };

            console.log(session["themes"]);

            let allThemes = JSON.parse(session["themes"]);
            for (let i = 0; i < allThemes.length; i++) {
                let tempTheme = allThemes[i];
                let tempAttr = '[data-theme-id="' + tempTheme.id + '"]';
                let checker = $('.tab').is(tempAttr);
                if (checker == false) {
                    addTheme(tempTheme);
                }
            }
        };

        var addTextToConsole = function (text) {
            let textDiv = document.createElement("div");
            let innerText = document.createTextNode('~ ' + text);
            textDiv.append(innerText);
            $("#output").append(textDiv);
        };
        var clear = function () {
            $("#output").empty();
        }
        var updateUserInfo = function (session = null) {
            if (session == null) {
                sendAjax("Account/GetSessionInfo");
            }
            else {
                let userName = session["login"];
                if (userName == null) {
                    userName = "unsigned";
                }
                $("#current_user").empty().append(document.createTextNode(userName));
                //$("#current_theme").empty().append(document.createTextNode(session["current_theme"]));
            }
        };
    </script>
    @*Ajax login script*@
    <script>
        var loginAjaxFunc = function () {
            let token = $('input[name ="__RequestVerificationToken"]').val();
            let data = {
                __RequestVerificationToken: token,
                loginOrEmail: $("#login").val(),
                password: $("#password").val()
            };
            $("#loginForm").remove();
            $("#loginScript").remove();
            sendAjax("Account/Login", data);
        };
    </script>
    @*chatScript*@
    @*
        <script>
                "use strict";
                const hubConnection = new signalR.HubConnectionBuilder().withUrl("/chat").build();
                let connectionId = "";

                document.getElementById("btnSend").addEventListener("click", function (e) {
                    e.preventDefault();
                    let message = document.getElementById("textBox").value;
                    let userName = document.getElementById("userName").value;
                    //let group = document.getElementById("group").value;
                    console.log(userName);
                    hubConnection.invoke("PublicSingle", userName, message, /*group,*/ connectionId);
                });

                hubConnection.on("GetMessage", function (userName, message) {

                    console.log("Getting message");

                    let elemName = document.createElement("label");
                    elemName.appendChild(document.createTextNode(userName + ': '));
                    let elemMessage = document.createElement("span");
                    elemMessage.appendChild(document.createTextNode(message));
                    let elem = document.createElement("div");
                    elem.classList.add("message");
                    elem.append(elemName);
                    elem.append(elemMessage);
                    document.getElementById("chat").appendChild(elem);

                    console.log("Getting end");
                });


                hubConnection.start().then(() => {
                    // после соединения получаем id подключения
                    console.log(hubConnection.connectionId);
                    connectionId = hubConnection.connectionId;
                });
            </script>
    *@
}