@model MainInfoViewModel;
@{
    string current_user = "unsigned";
    if (User.Identity.IsAuthenticated)
    {
        current_user = User.Identity.Name;
    }
}
<div class="toolbar">
    <button id="btn_chat" class="toolbar-button-chatmode off"></button>
</div>
<div class="container-console">
    <div class="console-header font-medium">
        <div class="logo txt-console-orange">Terminal: </div>
        <div class="user" id="current_user">@current_user</div>
        <button id="test" type="button">Test</button>
    </div>
    <div class="font-medium">

        <div id="output" class="console-output txt-console-orange">
            <div id="terminal">
                <div>~Welocome</div>
            </div>
            <div id="chatbox" hidden>
                <div>Here chatbox</div>
            </div>
        </div>

        <div class="console-input-container">
            <div class="keyboard">
                <textarea id="input" rows="1" class="txt-console-bg-gray font-medium"></textarea>
            </div>
        </div>
    </div>
    <div class="themebox">
        <div id="themeTabs" class="console-header txt-console-orange font-medium">
        </div>
        <div id="theme_body" style="background-color:antiquewhite">

        </div>
    </div>

</div>


@section Scripts{
    @*ChatScript*@
    <script>
        let chatmode = false;
        let hubConnection;
        let connectionId = "";

        let createHubConnection = function () {
            let connection = new signalR.HubConnectionBuilder().withUrl("/chat").build();
            connection.on("getMessageR", function (themeId, userName, message) {
                console.log("getting");
                let messageDiv = document.createElement("div");
                let innerText = document.createTextNode('~ ' + userName + ': ' + message);
                messageDiv.append(innerText);
                $('#chatbox [data-theme-id="' + themeId + '"]').append(messageDiv);
            });
            return connection;
        };

        hubConnection = createHubConnection();
        hubConnection.start().then(() => {
            console.log(hubConnection.connectionId);
            connectionId = hubConnection.connectionId;
            sendAjax("Account/GetSessionInfo", null, function (response) {
                let session = JSON.parse(response);
                updateChats(session);
            });
        });

        var reloadHubConnection = function () {
            hubConnection.stop();
            hubConnection = createHubConnection();
            hubConnection.start().then(() => {
                console.log(hubConnection.connectionId);
                connectionId = hubConnection.connectionId;
                sendAjax("Account/GetSessionInfo", null, function (response) {
                    let session = JSON.parse(response);
                    updateChats(session);
                });
                $('#themeTabs [data-theme-id]').each(function () {
                    let id = $(this).attr('data-theme-id');
                    hubConnection.invoke("Open", id);
                });
            });
            
        };

        let sendMessageR = function (themeId, userName, message) {
            console.log('sending');
            hubConnection.invoke("PublicSingle", themeId, userName, message);
        };

        $('#input').keypress(function (e) {
            if (e.keyCode == 13 && chatmode == true) {
                e.preventDefault();
                let message = $(this).val();
                let userName = $("#current_user").text();
                let themeId = $("#themeTabs .tab.selected").attr('data-theme-id');
                $(this).val('');
                sendMessageR(themeId, userName, message);
            }
        });


        var closeTheme = function (tab) {
            $(tab.parentElement).remove();
            let id = $(tab.parentElement).attr('data-theme-id');
            $('#theme_body [data-theme-id="' + id + '"]').remove();
            hubConnection.invoke("Close", id.toString());
            $('#chatbox [data-theme-id="' + id + '"]').remove();
            sendAjax("/Terminal/deselect", { id: id });
        };

        var selectTheme = function (tab) {
            $('.tab.selected').removeClass('selected');
            $(tab).addClass('selected');
            let id = $(tab).attr('data-theme-id');
            $('#theme_body [data-theme-id]').hide();
            $('#chatbox [data-theme-id]').hide();
            $('[data-theme-id="' + id + '"]').show();
        };

        var updateChats = function (session) {

            let addThemeTab = function (themeModel) {
                let tabElem = document.createElement("div");
                tabElem.classList.add("tab");
                tabElem.setAttribute("data-theme-id", themeModel.id);

                let span = document.createElement("span");
                span.textContent = themeModel.name;
                tabElem.append(span);

                let body = document.createElement('div');
                body.textContent = themeModel.body;
                body.setAttribute("data-theme-id", themeModel.id);

                let btn = document.createElement("button");
                btn.textContent = "X";
                btn.classList.add("btn-close");
                tabElem.append(btn);

                $("#themeTabs").append(tabElem);
                $("#theme_body").append(body);
                $('.themebox .tab').on('click', function () {
                    selectTheme(this);
                });
                selectTheme(tabElem);
            };

            let addChatToChatbox = function (themeModel) {
                let chatView = document.createElement('div');
                chatView.setAttribute("data-theme-id", themeModel.id);
                $('#chatbox').append(chatView);
            };

            if (session['themes'] != null) {
                let allThemes = JSON.parse(session["themes"]);
                for (let i = 0; i < allThemes.length; i++) {
                    let tempTheme = allThemes[i];
                    let tempAttr = '[data-theme-id="' + tempTheme.id + '"]';
                    let checker = $('.tab').is(tempAttr);
                    if (checker == false) {
                        addThemeTab(tempTheme);
                        addChatToChatbox(tempTheme);
                        hubConnection.invoke("Open", tempTheme.id.toString());
                    }
                }
            }
        };

    </script>
    @*Initialyzing script*@
    <script>


        $(function () {
            $("#test").click(function () {
                console.log(document.cookie);
                //[.AirTalk.UserSession]);
            });

            $('#btn_chat').click(function () {
                if (chatmode == false) {
                    chatmode = true;
                    this.classList.remove('off');
                    this.classList.add('on');
                    $('#terminal').hide();
                    $('#chatbox').show();
                }
                else {
                    chatmode = false;
                    this.classList.remove('on');
                    this.classList.add('off');
                    $('#chatbox').hide();
                    $('#terminal').show();
                }
            });

            $('#input').keypress(function (e) {
                if (e.keyCode == 13 && chatmode == false) {
                    let cmd = $(this).val();
                    e.preventDefault();
                    addTextToConsole(cmd);
                    $(this).val('');
                    sendCommandToTerminal(cmd);
                }
            });

            $('#themeTabs').on('click', '.btn-close', function () {
                closeTheme(this);
            });

            $('.themebox .tab').on('click', function () {
                selectTheme(this);
            });
        });
    </script>
    @*cmdTranslatorScript*@
    <script>

        var sendCommandToTerminal = function (cmd) {
            let data = { request: cmd };
            let context = "/Terminal/InitializeCommand";
            sendAjax(context, data);
        };

        var sendAjax = function (url, data, succsesFunc = null) {
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: "text",
                beforeSend: function () {
                    $('#input').prop('disabled', true);
                },
                complete: function () {
                    $('#input').prop('disabled', false);
                    $('#input').focus();
                },
                success: function (response) {
                    if (succsesFunc == null) {
                        getResponse(response);
                    }
                    else {
                        succsesFunc(response);
                    }
                    
                },
                error: function (req, status, error) {
                    addTextToConsole(error);
                }
            });

            let getResponse = function (response) {
                try {
                    let terminalResult = JSON.parse(response);
                    for (let i = 0; i < terminalResult.length; i++) {

                        let type = terminalResult[i].type;
                        let context = terminalResult[i].context;
                        let data = terminalResult[i].contextParams;
                        let inlineData = terminalResult[i].inlineParams;

                        if (type == "view") {
                            $("#terminal").append(context);
                            continue;
                        }

                        if (type == "js-inline") {
                            console.log(inlineData);
                            window[context].apply(this, inlineData);
                            continue;
                        }

                        if (type == "js-model") {
                            window[context](data);
                            continue;
                        }

                        if (type == "ajax") {
                            sendAjax(context, data);
                            continue;
                        }

                        console.log("unknown type of response");
                    }

                }
                catch (error) {
                    console.log("response error: " + error);
                    $('#terminal').append(response);
                }
            };
        }


    </script>
    @*JS client commands*@
    <script>
        var addTextToConsole = function (text) {
            let textDiv = document.createElement("div");
            let innerText = document.createTextNode('~ ' + text);
            textDiv.append(innerText);
            $("#terminal").append(textDiv);
        };

        var clear = function () {
            $("#terminal").empty();
        }

        var updateUserInfo = function (session) {
                let userName = session["login"];
                if (session==null||userName == null) {
                    userName = "unsigned";
                }
                $("#current_user").empty().append(document.createTextNode(userName));
        };
    </script>
    @*Ajax login script*@
    <script>
        var loginAjaxFunc = function () {
            let token = $('input[name ="__RequestVerificationToken"]').val();
            let data = {
                __RequestVerificationToken: token,
                loginOrEmail: $("#login").val(),
                password: $("#password").val()
            };
            $("#loginForm").remove();
            $("#loginScript").remove();
            sendAjax("Account/Login", data);
        };
    </script>
}